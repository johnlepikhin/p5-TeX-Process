* TeX::Processor

Simple parser and printer for TeX-like syntaxes.

** Parser

Parser returns simple self-documented AST structure which can be
processed with all Perl power.

#+NAME: Parser
#+BEGIN_SRC perl :results output code :exports both
  use Data::Dumper;
  use TeX::Processor::Parser;

  my $tex_string = <<'END'
    \begin{document}

    \tiny \textbf{tiny bold text}

    \end{document}
  END
      ;

  print Dumper TeX::Processor::Parser::parse( document => $tex_string );
#+END_SRC

Will return AST representation of TeX document:

#+RESULTS: Parser
#+BEGIN_SRC perl
$VAR1 = [
          {
            'type' => 'TEXT',
            'content' => '  ',
            'endpos' => 2,
            'line' => 1,
            'startpos' => 0
          },
          {
            'startpos' => 3,
            'args' => [
                        {
                          'type' => 'brace',
                          'content' => [
                                         {
                                           'startpos' => 9,
                                           'endpos' => 17,
                                           'line' => 1,
                                           'content' => 'document',
                                           'type' => 'TEXT'
                                         }
                                       ]
                        }
                      ],
            'line' => 1,
            'endpos' => 8,
            'type' => 'COMMAND',
            'command' => 'begin'
          },
          {
            'content' => '
',
            'type' => 'TEXT',
            'startpos' => 18,
            'line' => 1,
            'endpos' => 19
          },
          {
            'startpos' => 19,
            'line' => 2,
            'endpos' => 20,
            'content' => '
',
            'type' => 'TEXT'
          },
          {
            'line' => 3,
            'endpos' => 22,
            'startpos' => 20,
            'type' => 'TEXT',
            'content' => '  '
          },
          {
            'startpos' => 23,
            'line' => 3,
            'endpos' => 27,
            'args' => [],
            'type' => 'COMMAND',
            'command' => 'tiny'
          },
          {
            'type' => 'TEXT',
            'content' => ' ',
            'endpos' => 28,
            'line' => 3,
            'startpos' => 27
          },
          {
            'startpos' => 29,
            'args' => [
                        {
                          'content' => [
                                         {
                                           'startpos' => 36,
                                           'endpos' => 50,
                                           'line' => 3,
                                           'content' => 'tiny bold text',
                                           'type' => 'TEXT'
                                         }
                                       ],
                          'type' => 'brace'
                        }
                      ],
            'endpos' => 35,
            'line' => 3,
            'type' => 'COMMAND',
            'command' => 'textbf'
          },
          {
            'startpos' => 51,
            'line' => 3,
            'endpos' => 52,
            'content' => '
',
            'type' => 'TEXT'
          },
          {
            'startpos' => 52,
            'line' => 4,
            'endpos' => 53,
            'content' => '
',
            'type' => 'TEXT'
          },
          {
            'content' => '  ',
            'type' => 'TEXT',
            'startpos' => 53,
            'endpos' => 55,
            'line' => 5
          },
          {
            'startpos' => 56,
            'line' => 5,
            'endpos' => 59,
            'args' => [
                        {
                          'type' => 'brace',
                          'content' => [
                                         {
                                           'content' => 'document',
                                           'type' => 'TEXT',
                                           'startpos' => 60,
                                           'endpos' => 68,
                                           'line' => 5
                                         }
                                       ]
                        }
                      ],
            'command' => 'end',
            'type' => 'COMMAND'
          },
          {
            'type' => 'TEXT',
            'content' => '
',
            'endpos' => 70,
            'line' => 5,
            'startpos' => 69
          }
        ];
#+END_SRC

Sorts of structures which can be generated:

*** Example 1

Source:

#+BEGIN_SRC latex
text
#+END_SRC

Produces:

#+BEGIN_SRC perl
  [   {   'endpos'   => 4,
          'content'  => 'test',
          'line'     => 1,
          'type'     => 'TEXT',
          'startpos' => 0
      } ]
#+END_SRC

*** Example 2

Source:

#+BEGIN_SRC latex
\textbf{test}
#+END_SRC

Produces:

#+BEGIN_SRC perl
  [   {   'startpos' => 1,
          'line'     => 1,
          'type'     => 'COMMAND',
          'endpos'   => 7,
          'command'  => 'textbf',
          'args'     => [
              {   'content' => [
                      {   'startpos' => 8,
                          'endpos'   => 12,
                          'type'     => 'TEXT',
                          'content'  => 'test',
                          'line'     => 1
                      }
                  ],
                  'type' => 'brace'
              } ] } ]
#+END_SRC

*** Example 3

Source:

#+BEGIN_SRC latex
\usepackage[options]{packagename}
#+END_SRC

Produces:

#+BEGIN_SRC perl
  [   {   'type'     => 'COMMAND',
          'line'     => 1,
          'startpos' => 1,
          'endpos'   => 11,
          'args'     => [
              {   'type'    => 'bracket',
                  'content' => [
                      {   'type'     => 'TEXT',
                          'content'  => 'options',
                          'line'     => 1,
                          'startpos' => 12,
                          'endpos'   => 19
                      } ]
              },
              {   'content' => [
                      {   'type'     => 'TEXT',
                          'content'  => 'packagename',
                          'line'     => 1,
                          'startpos' => 21,
                          'endpos'   => 32
                      }
                  ],
                  'type' => 'brace'
              }
          ],
          'command' => 'usepackage'
      } ]
#+END_SRC

** Printer

Currently only one function is available:
~TeX::Processor::Printer::latex()~ which is actually just a reverse
for parser, i.e. generates TeX structure from AST:

#+name: Printer
#+BEGIN_SRC perl :results output code :wrap "SRC latex" :exports both
  use TeX::Processor::Printer;

  my $document = [
      {   'type'    => 'COMMAND',
          'command' => 'textbf',
          'args'    => [
              {   'content' => [
                      {   'type'    => 'TEXT',
                          'content' => 'test',
                      }
                  ],
                  'type' => 'brace'
              } ] } ];

  print TeX::Processor::Printer::latex( document => $document );
#+END_SRC

Will produce:

#+RESULTS: Printer
#+BEGIN_SRC latex
\textbf{test}
#+END_SRC

** Make

~TeX::Processor::Make~ is helper module with primitives for easy
structure generation:

#+name: Make
#+BEGIN_SRC perl :results output code :wrap "SRC latex" :exports both
  use TeX::Processor::Make;
  use TeX::Processor::Printer;

  my $text = TeX::Processor::Make::text('test');

  my $command1 = TeX::Processor::Make::command( command => 'cmd' );

  my $command2 = TeX::Processor::Make::command(
      command => 'cmd',
      args => [ { content => [$text], type => 'bracket' }, { content => [ $command1, $text ], type => 'brace' }, ],
  );

  my $group = TeX::Processor::Make::group( children => [ $text, $command1, $command2 ] );

  print TeX::Processor::Printer::latex ( document => [$group] );
#+END_SRC

Will produce:

#+RESULTS: Make
#+BEGIN_SRC latex
{test\cmd\cmd[test]{\cmdtest}}
#+END_SRC

** Processor

There is some simple processing tools available. In the example below
following modufications to AST will be applied:
 1. All commands like '\tiny' will be replaced with '\large'
 2. All commands like '\begin' and '\end' will be removed from
    document
 3. Commands matching regexp ~/^text/~ will get new arguments

#+name: Processor
#+BEGIN_SRC perl :results output code :wrap "SRC latex" :exports both
  use TeX::Processor::Parser;
  use TeX::Processor::Printer;
  use TeX::Processor::Make;
  use TeX::Processor;

  my $tex_string = <<'END'
  \begin{document}
  \tiny \textbf{tiny bold text}
  \end{document}
  END
      ;

  my $document = TeX::Processor::Parser::parse( document => $tex_string );
  my $mapped = TeX::Processor::map_commands(
      list => $document,
      map  => {
          begin => sub { },
          end   => sub { },
          tiny  => sub { TeX::Processor::Make::command( command => 'large' ) },
      },
      unified => sub {
          my $command = shift;

          if ( $command->{command} =~ m{^text} ) {
              $command->{args} = [
                  {   type    => 'brace',
                      content => [ TeX::Processor::Make::text('Large bold text') ]
                  },
              ];
              return 1, $command;
          }
      },
  );

  print TeX::Processor::Printer::latex document => $mapped;
#+END_SRC

Will print:

#+RESULTS: Processor
#+BEGIN_SRC latex

\large \textbf{Large bold text}

#+END_SRC

** Dependencies

Module depends on Syntax::NamedArgs which is available here:
https://github.com/johnlepikhin/p5-Syntax-NamedArgs

** Installation

To install this module type the following:

#+BEGIN_SRC bash
  perl Makefile.PL
  make
  make test
  make install
#+END_SRC

** Copyright and license

Copyright (C) 2019 by Evgenii Lepikhin

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.24.1 or,
at your option, any later version of Perl 5 you may have available.

